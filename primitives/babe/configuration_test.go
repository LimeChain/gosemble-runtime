package babe

import (
	"bytes"
	"testing"

	sc "github.com/LimeChain/goscale"
	primitives "github.com/LimeChain/gosemble/primitives/types"
	"github.com/stretchr/testify/assert"
)

var (
	configuration = Configuration{
		SlotDuration: sc.U64(1),
		EpochLength:  sc.U64(2),
		C:            primitives.RationalValue{Numerator: 3, Denominator: 4},
		Authorities:  sc.Sequence[Authority]{authority},
		Randomness:   NewRandomness(),
		AllowedSlots: NewPrimarySlots(),
	}
)

var (
	configurationBytes = []byte{
		0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x4, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0,
	}
)

func Test_Configuration_Encode(t *testing.T) {
	buffer := &bytes.Buffer{}

	err := configuration.Encode(buffer)

	assert.NoError(t, err)
	assert.Equal(t, configurationBytes, buffer.Bytes())
}

func Test_Configuration_Bytes(t *testing.T) {
	assert.Equal(t, configurationBytes, configuration.Bytes())
}

func Test_DecodeConfiguration(t *testing.T) {
	buffer := bytes.NewBuffer(configurationBytes)

	decodedConfiguration, err := DecodeConfiguration(buffer)

	assert.NoError(t, err)
	assert.Equal(t, configuration, decodedConfiguration)
}
