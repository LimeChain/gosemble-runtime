package types

import (
	"bytes"
	"testing"

	sc "github.com/LimeChain/goscale"
	"github.com/stretchr/testify/assert"
)

var (
	output = sc.NewFixedSequence[sc.U8](32, make([]sc.U8, 32)...)
	proof  = sc.NewFixedSequence[sc.U8](64, make([]sc.U8, 64)...)
)

var (
	vrfSignature = VrfSignature{PreOutput: output, Proof: proof}
)

var (
	vrfSignatureBytes = []byte{
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	}
)

func Test_NewVrfSignature(t *testing.T) {
	signature, err := NewVrfSignature(output, proof)
	assert.NoError(t, err)
	assert.Equal(t, vrfSignature, signature)
}

func Test_VrfSignature_Encode(t *testing.T) {
	buffer := &bytes.Buffer{}

	err := vrfSignature.Encode(buffer)

	assert.NoError(t, err)
	assert.Equal(t, vrfSignatureBytes, buffer.Bytes())
}

func Test_DecodeVrfSignature(t *testing.T) {
	buffer := bytes.NewBuffer(vrfSignatureBytes)

	signature, err := DecodeVrfSignature(buffer)

	assert.NoError(t, err)
	assert.Equal(t, vrfSignature, signature)
}
